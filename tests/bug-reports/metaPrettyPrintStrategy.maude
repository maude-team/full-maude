red in META-LEVEL : metaPrettyPrintStrategy(mod 'QUEENS is
  nil
  sorts 'Bool ; 'List`{Nat`} ; 'Nat ; 'NeList`{Nat`} ; 'NeSet`{Nat`} ; 'NzNat ; 'Set`{Nat`} ; 'Zero .
  subsort 'Nat < 'NeList`{Nat`} .
  subsort 'Nat < 'NeSet`{Nat`} .
  subsort 'NeList`{Nat`} < 'List`{Nat`} .
  subsort 'NeSet`{Nat`} < 'Set`{Nat`} .
  subsort 'NzNat < 'Nat .
  subsort 'Zero < 'Nat .
  op '$card : 'Set`{Nat`} 'Nat -> 'Nat [none] .
  op '$diff : 'Set`{Nat`} 'Set`{Nat`} 'Set`{Nat`} -> 'Set`{Nat`} [none] .
  op '$intersect : 'Set`{Nat`} 'Set`{Nat`} 'Set`{Nat`} -> 'Set`{Nat`} [none] .
  op '$reverse : 'List`{Nat`} 'List`{Nat`} -> 'List`{Nat`} [none] .
  op '$size : 'List`{Nat`} 'Nat -> 'Nat [none] .
  op '0 : nil -> 'Zero [ctor] .
  op '_&_ : 'Nat 'Nat -> 'Nat [assoc comm prec(53) special(
    id-hook('ACU_NumberOpSymbol, '&)
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
  op '_*_ : 'Nat 'Nat -> 'Nat [assoc comm prec(31) special(
    id-hook('ACU_NumberOpSymbol, '*)
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
  op '_*_ : 'NzNat 'NzNat -> 'NzNat [assoc comm prec(31) special(
    id-hook('ACU_NumberOpSymbol, '*)
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
  op '_+_ : 'Nat 'Nat -> 'Nat [assoc comm prec(33) special(
    id-hook('ACU_NumberOpSymbol, '+)
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
  op '_+_ : 'NzNat 'Nat -> 'NzNat [assoc comm prec(33) special(
    id-hook('ACU_NumberOpSymbol, '+)
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
  op '_<<_ : 'Nat 'Nat -> 'Nat [prec(35) gather('E 'e) special(
    id-hook('NumberOpSymbol, '<<)
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
  op '_<=_ : 'Nat 'Nat -> 'Bool [prec(37) special(
    id-hook('NumberOpSymbol, '<=)
    op-hook('succSymbol, 's_, 'Nat, 'NzNat)
    term-hook('trueTerm, 'true.Bool)
    term-hook('falseTerm, 'false.Bool))] .
  op '_<_ : 'Nat 'Nat -> 'Bool [prec(37) special(
    id-hook('NumberOpSymbol, '<)
    op-hook('succSymbol, 's_, 'Nat, 'NzNat)
    term-hook('trueTerm, 'true.Bool)
    term-hook('falseTerm, 'false.Bool))] .
  op '_=/=_ : 'Universal 'Universal -> 'Bool [prec(51) poly(1 2) special(
    id-hook('EqualitySymbol, nil)
    term-hook('equalTerm, 'false.Bool)
    term-hook('notEqualTerm, 'true.Bool))] .
  op '_==_ : 'Universal 'Universal -> 'Bool [prec(51) poly(1 2) special(
    id-hook('EqualitySymbol, nil)
    term-hook('equalTerm, 'true.Bool)
    term-hook('notEqualTerm, 'false.Bool))] .
  op '_>=_ : 'Nat 'Nat -> 'Bool [prec(37) special(
    id-hook('NumberOpSymbol, '>=)
    op-hook('succSymbol, 's_, 'Nat, 'NzNat)
    term-hook('trueTerm, 'true.Bool)
    term-hook('falseTerm, 'false.Bool))] .
  op '_>>_ : 'Nat 'Nat -> 'Nat [prec(35) gather('E 'e) special(
    id-hook('NumberOpSymbol, '>>)
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
  op '_>_ : 'Nat 'Nat -> 'Bool [prec(37) special(
    id-hook('NumberOpSymbol, '>)
    op-hook('succSymbol, 's_, 'Nat, 'NzNat)
    term-hook('trueTerm, 'true.Bool)
    term-hook('falseTerm, 'false.Bool))] .
  op '_\_ : 'Set`{Nat`} 'Set`{Nat`} -> 'Set`{Nat`} [gather('E 'e)] .
  op '_^_ : 'Nat 'Nat -> 'Nat [prec(29) gather('E 'e) special(
    id-hook('NumberOpSymbol, '^)
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
  op '_^_ : 'NzNat 'Nat -> 'NzNat [prec(29) gather('E 'e) special(
    id-hook('NumberOpSymbol, '^)
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
  op '__ : 'List`{Nat`} 'List`{Nat`} -> 'List`{Nat`} [assoc ctor id('nil.List`{Nat`}) prec(25)] .
  op '__ : 'List`{Nat`} 'NeList`{Nat`} -> 'NeList`{Nat`} [assoc ctor id('nil.List`{Nat`}) prec(25)] .
  op '__ : 'NeList`{Nat`} 'List`{Nat`} -> 'NeList`{Nat`} [assoc ctor id('nil.List`{Nat`}) prec(25)] .
  op '_`,_ : 'NeSet`{Nat`} 'Set`{Nat`} -> 'NeSet`{Nat`} [assoc comm ctor id('empty.Set`{Nat`}) prec(121)
    format('d 'r 'os 'd)] .
  op '_`,_ : 'Set`{Nat`} 'Set`{Nat`} -> 'Set`{Nat`} [assoc comm ctor id('empty.Set`{Nat`}) prec(121)
    format('d 'r 'os 'd)] .
  op '_and-then_ : 'Bool 'Bool -> 'Bool [strat(1 0) prec(55) gather('e 'E)] .
  op '_and_ : 'Bool 'Bool -> 'Bool [assoc comm prec(55)] .
  op '_divides_ : 'NzNat 'Nat -> 'Bool [prec(51) special(
    id-hook('NumberOpSymbol, 'divides)
    op-hook('succSymbol, 's_, 'Nat, 'NzNat)
    term-hook('trueTerm, 'true.Bool)
    term-hook('falseTerm, 'false.Bool))] .
  op '_implies_ : 'Bool 'Bool -> 'Bool [prec(61) gather('e 'E)] .
  op '_in_ : 'Nat 'Set`{Nat`} -> 'Bool [none] .
  op '_or-else_ : 'Bool 'Bool -> 'Bool [strat(1 0) prec(59) gather('e 'E)] .
  op '_or_ : 'Bool 'Bool -> 'Bool [assoc comm prec(59)] .
  op '_psubset_ : 'Set`{Nat`} 'Set`{Nat`} -> 'Bool [none] .
  op '_quo_ : 'Nat 'NzNat -> 'Nat [prec(31) gather('E 'e) special(
    id-hook('NumberOpSymbol, 'quo)
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
  op '_rem_ : 'Nat 'NzNat -> 'Nat [prec(31) gather('E 'e) special(
    id-hook('NumberOpSymbol, 'rem)
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
  op '_subset_ : 'Set`{Nat`} 'Set`{Nat`} -> 'Bool [none] .
  op '_xor_ : 'Bool 'Bool -> 'Bool [assoc comm prec(57)] .
  op '_xor_ : 'Nat 'Nat -> 'Nat [assoc comm prec(55) special(
    id-hook('ACU_NumberOpSymbol, 'xor)
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
  op '_|_ : 'Nat 'Nat -> 'Nat [assoc comm prec(57) special(
    id-hook('ACU_NumberOpSymbol, '|)
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
  op '_|_ : 'NzNat 'Nat -> 'NzNat [assoc comm prec(57) special(
    id-hook('ACU_NumberOpSymbol, '|)
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
  op 'append : 'List`{Nat`} 'List`{Nat`} -> 'List`{Nat`} [none] .
  op 'append : 'List`{Nat`} 'NeList`{Nat`} -> 'NeList`{Nat`} [none] .
  op 'append : 'NeList`{Nat`} 'List`{Nat`} -> 'NeList`{Nat`} [none] .
  op 'delete : 'Nat 'Set`{Nat`} -> 'Set`{Nat`} [none] .
  op 'empty : nil -> 'Set`{Nat`} [ctor] .
  op 'false : nil -> 'Bool [ctor special(
    id-hook('SystemFalse, nil))] .
  op 'front : 'NeList`{Nat`} -> 'List`{Nat`} [none] .
  op 'gcd : 'Nat 'Nat -> 'Nat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'gcd)
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
  op 'gcd : 'NzNat 'Nat -> 'NzNat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'gcd)
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
  op 'head : 'NeList`{Nat`} -> 'Nat [none] .
  op 'if_then_else_fi : 'Bool 'Universal 'Universal -> 'Universal [poly(2 3 0) special(
    id-hook('BranchSymbol, nil)
    term-hook('1, 'true.Bool)
    term-hook('2, 'false.Bool))] .
  op 'insert : 'Nat 'Set`{Nat`} -> 'Set`{Nat`} [none] .
  op 'intersection : 'Set`{Nat`} 'Set`{Nat`} -> 'Set`{Nat`} [none] .
  op 'isOk : 'List`{Nat`} -> 'Bool [none] .
  op 'isSolution : 'List`{Nat`} -> 'Bool [none] .
  op 'last : 'NeList`{Nat`} -> 'Nat [none] .
  op 'lcm : 'Nat 'Nat -> 'Nat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'lcm)
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
  op 'lcm : 'NzNat 'NzNat -> 'NzNat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'lcm)
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
  op 'max : 'Nat 'Nat -> 'Nat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'max)
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
  op 'max : 'NzNat 'Nat -> 'NzNat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'max)
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
  op 'min : 'Nat 'Nat -> 'Nat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'min)
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
  op 'min : 'NzNat 'NzNat -> 'NzNat [assoc comm special(
    id-hook('ACU_NumberOpSymbol, 'min)
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
  op 'modExp : '`[Nat`] '`[Nat`] '`[Nat`] -> '`[Nat`] [special(
    id-hook('NumberOpSymbol, 'modExp)
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
  op 'nil : nil -> 'List`{Nat`} [ctor] .
  op 'not_ : 'Bool -> 'Bool [prec(53)] .
  op 'occurs : 'Nat 'List`{Nat`} -> 'Bool [none] .
  op 'ok : 'List`{Nat`} 'Nat 'Nat -> 'Bool [none] .
  op 'reverse : 'List`{Nat`} -> 'List`{Nat`} [none] .
  op 'reverse : 'NeList`{Nat`} -> 'NeList`{Nat`} [none] .
  op 's_ : 'Nat -> 'NzNat [iter ctor special(
    id-hook('SuccSymbol, nil)
    term-hook('zeroTerm, '0.Zero))] .
  op 'sd : 'Nat 'Nat -> 'Nat [comm special(
    id-hook('CUI_NumberOpSymbol, 'sd)
    op-hook('succSymbol, 's_, 'Nat, 'NzNat))] .
  op 'size : 'List`{Nat`} -> 'Nat [none] .
  op 'size : 'NeList`{Nat`} -> 'NzNat [none] .
  op 'tail : 'NeList`{Nat`} -> 'List`{Nat`} [none] .
  op 'true : nil -> 'Bool [ctor special(
    id-hook('SystemTrue, nil))] .
  op 'union : 'NeSet`{Nat`} 'Set`{Nat`} -> 'NeSet`{Nat`} [none] .
  op 'union : 'Set`{Nat`} 'NeSet`{Nat`} -> 'NeSet`{Nat`} [none] .
  op 'union : 'Set`{Nat`} 'Set`{Nat`} -> 'Set`{Nat`} [none] .
  op '|_| : 'NeSet`{Nat`} -> 'NzNat [none] .
  op '|_| : 'Set`{Nat`} -> 'Nat [none] .
  none
  eq '$card['empty.Set`{Nat`},'C:Nat] = 'C:Nat [none] .
  eq '$card['_`,_['E:Nat,'S:Set`{Nat`}],'C:Nat] = '$card['S:Set`{Nat`},'_+_['C:Nat,'s_['0.Zero]]] [owise] .
  eq '$card['_`,_['N:NeSet`{Nat`},'N:NeSet`{Nat`},'S:Set`{Nat`}],'C:Nat] = '$card['_`,_['N:NeSet`{Nat`},
    'S:Set`{Nat`}],'C:Nat] [none] .
  eq '$diff['empty.Set`{Nat`},'S':Set`{Nat`},'A:Set`{Nat`}] = 'A:Set`{Nat`} [none] .
  eq '$diff['_`,_['E:Nat,'S:Set`{Nat`}],'S':Set`{Nat`},'A:Set`{Nat`}] = '$diff['S:Set`{Nat`},
    'S':Set`{Nat`},'if_then_else_fi['_in_['E:Nat,'S':Set`{Nat`}],'A:Set`{Nat`},'_`,_['E:Nat,
    'A:Set`{Nat`}]]] [none] .
  eq '$intersect['empty.Set`{Nat`},'S':Set`{Nat`},'A:Set`{Nat`}] = 'A:Set`{Nat`} [none] .
  eq '$intersect['_`,_['E:Nat,'S:Set`{Nat`}],'S':Set`{Nat`},'A:Set`{Nat`}] = '$intersect['S:Set`{Nat`},
    'S':Set`{Nat`},'if_then_else_fi['_in_['E:Nat,'S':Set`{Nat`}],'_`,_['E:Nat,'A:Set`{Nat`}],
    'A:Set`{Nat`}]] [none] .
  eq '$reverse['nil.List`{Nat`},'A:List`{Nat`}] = 'A:List`{Nat`} [none] .
  eq '$reverse['__['E:Nat,'L:List`{Nat`}],'A:List`{Nat`}] = '$reverse['L:List`{Nat`},'__['E:Nat,
    'A:List`{Nat`}]] [none] .
  eq '$size['nil.List`{Nat`},'C:Nat] = 'C:Nat [none] .
  eq '$size['__['E:Nat,'L:List`{Nat`}],'C:Nat] = '$size['L:List`{Nat`},'_+_['C:Nat,'s_['0.Zero]]] [none] .
  eq '_\_['S:Set`{Nat`},'N:NeSet`{Nat`}] = '$diff['S:Set`{Nat`},'N:NeSet`{Nat`},'empty.Set`{Nat`}] [none] .
  eq '_\_['S:Set`{Nat`},'empty.Set`{Nat`}] = 'S:Set`{Nat`} [none] .
  eq '_`,_['N:NeSet`{Nat`},'N:NeSet`{Nat`}] = 'N:NeSet`{Nat`} [none] .
  eq '_and-then_['false.Bool,'B:`[Bool`]] = 'false.Bool [none] .
  eq '_and-then_['true.Bool,'B:`[Bool`]] = 'B:`[Bool`] [none] .
  eq '_and_['A:Bool,'A:Bool] = 'A:Bool [none] .
  eq '_and_['A:Bool,'_xor_['B:Bool,'C:Bool]] = '_xor_['_and_['A:Bool,'B:Bool],'_and_['A:Bool,'C:Bool]] [
    none] .
  eq '_and_['false.Bool,'A:Bool] = 'false.Bool [none] .
  eq '_and_['true.Bool,'A:Bool] = 'A:Bool [none] .
  eq '_implies_['A:Bool,'B:Bool] = 'not_['_xor_['A:Bool,'_and_['A:Bool,'B:Bool]]] [none] .
  eq '_in_['E:Nat,'S:Set`{Nat`}] = 'false.Bool [owise] .
  eq '_in_['E:Nat,'_`,_['E:Nat,'S:Set`{Nat`}]] = 'true.Bool [none] .
  eq '_or-else_['false.Bool,'B:`[Bool`]] = 'B:`[Bool`] [none] .
  eq '_or-else_['true.Bool,'B:`[Bool`]] = 'true.Bool [none] .
  eq '_or_['A:Bool,'B:Bool] = '_xor_['_and_['A:Bool,'B:Bool],'_xor_['A:Bool,'B:Bool]] [none] .
  eq '_psubset_['S:Set`{Nat`},'S':Set`{Nat`}] = '_and-then_['_=/=_['S:Set`{Nat`},'S':Set`{Nat`}],'_subset_[
    'S:Set`{Nat`},'S':Set`{Nat`}]] [none] .
  eq '_subset_['empty.Set`{Nat`},'S':Set`{Nat`}] = 'true.Bool [none] .
  eq '_subset_['_`,_['E:Nat,'S:Set`{Nat`}],'S':Set`{Nat`}] = '_and-then_['_in_['E:Nat,'S':Set`{Nat`}],
    '_subset_['S:Set`{Nat`},'S':Set`{Nat`}]] [none] .
  eq '_xor_['A:Bool,'A:Bool] = 'false.Bool [none] .
  eq '_xor_['false.Bool,'A:Bool] = 'A:Bool [none] .
  eq 'append['A:List`{Nat`},'L:List`{Nat`}] = '__['A:List`{Nat`},'L:List`{Nat`}] [none] .
  eq 'delete['E:Nat,'S:Set`{Nat`}] = 'S:Set`{Nat`} [owise] .
  eq 'delete['E:Nat,'_`,_['E:Nat,'S:Set`{Nat`}]] = 'delete['E:Nat,'S:Set`{Nat`}] [none] .
  eq 'front['__['L:List`{Nat`},'E:Nat]] = 'L:List`{Nat`} [none] .
  eq 'head['__['E:Nat,'L:List`{Nat`}]] = 'E:Nat [none] .
  eq 'insert['E:Nat,'S:Set`{Nat`}] = '_`,_['E:Nat,'S:Set`{Nat`}] [none] .
  eq 'intersection['S:Set`{Nat`},'N:NeSet`{Nat`}] = '$intersect['S:Set`{Nat`},'N:NeSet`{Nat`},
    'empty.Set`{Nat`}] [none] .
  eq 'intersection['S:Set`{Nat`},'empty.Set`{Nat`}] = 'empty.Set`{Nat`} [none] .
  eq 'isOk['__['L:List`{Nat`},'N:Nat]] = 'ok['L:List`{Nat`},'N:Nat,'s_['0.Zero]] [none] .
  eq 'isSolution['L:List`{Nat`}] = '_==_['size['L:List`{Nat`}],'s_^8['0.Zero]] [none] .
  eq 'last['__['L:List`{Nat`},'E:Nat]] = 'E:Nat [none] .
  eq 'not_['A:Bool] = '_xor_['true.Bool,'A:Bool] [none] .
  eq 'occurs['E:Nat,'nil.List`{Nat`}] = 'false.Bool [none] .
  eq 'occurs['E:Nat,'__['E':Nat,'L:List`{Nat`}]] = 'if_then_else_fi['_==_['E:Nat,'E':Nat],'true.Bool,
    'occurs['E:Nat,'L:List`{Nat`}]] [none] .
  eq 'ok['nil.List`{Nat`},'M:Nat,'Diff:Nat] = 'true.Bool [none] .
  eq 'reverse['L:List`{Nat`}] = '$reverse['L:List`{Nat`},'nil.List`{Nat`}] [none] .
  eq 'size['L:List`{Nat`}] = '$size['L:List`{Nat`},'0.Zero] [none] .
  eq 'tail['__['E:Nat,'L:List`{Nat`}]] = 'L:List`{Nat`} [none] .
  eq 'union['S:Set`{Nat`},'S':Set`{Nat`}] = '_`,_['S:Set`{Nat`},'S':Set`{Nat`}] [none] .
  eq '|_|['S:Set`{Nat`}] = '$card['S:Set`{Nat`},'0.Zero] [none] .
  ceq 'ok['__['L:List`{Nat`},'N:Nat],'M:Nat,'Diff:Nat] = 'ok['L:List`{Nat`},'M:Nat,'_+_['Diff:Nat,'s_[
    '0.Zero]]] if '_=/=_['N:Nat,'M:Nat] = 'true.Bool /\ '_=/=_['N:Nat,'_+_['M:Nat,'Diff:Nat]] = 'true.Bool
    /\ '_=/=_['M:Nat,'_+_['N:Nat,'Diff:Nat]] = 'true.Bool [none] .
  crl 'L:List`{Nat`} => '__['L:List`{Nat`},'N:Nat] if '_`,_['N:Nat,'S:Set`{Nat`}] := '_`,_['s_['0.Zero],
    '_`,_['s_^2['0.Zero],'_`,_['s_^3['0.Zero],'_`,_['s_^4['0.Zero],'_`,_['s_^5['0.Zero],'_`,_['s_^6[
    '0.Zero],'_`,_['s_^7['0.Zero],'s_^8['0.Zero]]]]]]]] [label('next)] .
endm, top('next[none]{empty}) ; match 'L:List`{Nat`} s.t. ('isOk['L:List`{Nat`}] = 'true.Bool), mixfix flat
    format number rat) .
